#!/usr/bin/env ruby

require 'rubygems'
require 'commander/import'
require 'psych'

@gloable_folder = "#{Dir.home}/Dropbox"
@task_file_name = 'tasks.yml'
@tasks_key = 'tasks'

def add_task(task, path)
  yaml = Psych.load_file(path)
end

def directories_list(current_dir)
  dirs = [current_dir]
  parent_dir = File.expand_path('..', current_dir)
  while parent_dir != current_dir do
    dirs.push parent_dir
    current_dir = parent_dir
    parent_dir = File.expand_path('..', current_dir)
  end
  return dirs.reverse
end

def task_yaml_at_path(path)
  if File.exists?(path) then
    return Psych.load_file(path)
  end
  return nil
end

def tasks_at_path(path)
  yaml = task_yaml_at_path(path)
  return nil unless yaml
  return yaml[@tasks_key].map do |t|
    { task: t, path: path }
  end
end

def tasks_for_dir_list(current_dir)
  tasks = []
  dirs = directories_list(Dir.pwd)
  dirs.each do |dir|
    path = "#{dir}/#{@task_file_name}"
    sub_tasks = tasks_at_path(path)
    tasks.push(sub_tasks) if sub_tasks
  end
  tasks = tasks.flatten
end

def all_tasks(current_dir)
  global_tasks = tasks_at_path("#{@gloable_folder}/#{@task_file_name}")
  other_tasks = tasks_for_dir_list(current_dir)
  return [global_tasks, other_tasks].flatten
end

def write_tasks_to_path(tasks, path)
  yaml = task_yaml_at_path(path)
  yaml = {} unless yaml
  yaml[@tasks_key] = tasks

  File.open(path, 'w') do |file|
    file.write(Psych.dump(yaml))
  end
end

program :name, 'Forget Me Not'
program :version, '0.0.1'
program :description, 'A smart, contextualized todo list. Designed to live in your terminal, and to be in your face.'

command :list do |c|
  c.syntax = 'fmn list, [options]'
  c.summary = ''
  c.description = ''
  c.example 'description', 'command example'
  c.option '--some-switch', 'Some switch that does something'
  c.action do |args, options|
    all_tasks(Dir.pwd).each_with_index do |t, index|
      puts "(#{index + 1}) - #{t[:task]}"
    end
  end
end

command :add do |c|
  c.syntax = 'fmn add, [options]'
  c.summary = 'Add a task to the forget me not list.'
  c.description = 'Add a task to the forget me not list.'
  c.example 'Add a task to the forget me not list. You don\'t need quotes.', 'fmn add Buy the milk'
  c.option '-g', '--global', 'Add to the global list'
  c.action do |args, options|
    task = args.join(' ')
    path = ""
    if options.global
      path = "#{@gloable_folder}/#{@task_file_name}"
    else
      path = "#{Dir.pwd}/#{@task_file_name}"
    end

    tasks = tasks_at_path(path) || []
    tasks = tasks.map { |t| t[:task] }
    tasks.push(task)

    write_tasks_to_path(tasks, path)
  end
end

command :done do |c|
  c.syntax = 'fmn done [options]'
  c.summary = 'Mark a task as done.'
  c.description = 'Mark a task as done, removing it from the list.'
  c.example 'Mark a task as done.', 'fmn done 1'
  c.action do |args, options|
    return unless args.length >= 1

    # TODO: check for non numeric arg
    index = args[0].to_i - 1

    # TODO: check for unexisting index
    task_to_remove = all_tasks(Dir.pwd)[index]
    tasks = tasks_at_path(task_to_remove[:path])

    # TODO: this is quite silly, how can we make it better?
    # TODO: what about tasks with the same name. Does it even make sense?
    tasks.delete_if { |t| t[:task] == task_to_remove[:task] }

    write_tasks_to_path(tasks.map { |t| t[:task] }, task_to_remove[:path])
  end
end

